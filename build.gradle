plugins {
    id 'java'
    id 'distribution'
    id 'com.github.jk1.dependency-license-report' version '2.0'
}

group 'org.jlab.kafka.connect'
version '1.3.0'

compileJava {
    options.release = 8
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

repositories {
    mavenCentral()
}

sourceSets {
    integration {
        java.srcDir "${projectDir}/src/integration/java"
        resources.srcDir "${projectDir}/src/integration/resources"
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    testImplementation.extendsFrom compileOnly
    integrationImplementation.extendsFrom implementation
    integrationRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation 'org.epics:jca:2.4.6'
    compileOnly 'com.fasterxml.jackson.core:jackson-databind:2.10.5'
    compileOnly 'org.apache.kafka:connect-api:2.6.2'
    compileOnly 'org.slf4j:slf4j-log4j12:1.7.28'
    testImplementation 'junit:junit:4.13'
    integrationImplementation 'org.testcontainers:testcontainers:1.16.3'
    integrationImplementation 'org.testcontainers:kafka:1.16.3'
    integrationImplementation 'org.apache.kafka:kafka-clients:2.6.2'
    integrationImplementation 'org.slf4j:slf4j-log4j12:1.7.28'
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    //shouldRunAfter test

    testLogging {
        showStandardStreams = true
    }
}

//check.dependsOn integrationTest

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += "-Xlint:unchecked"
}

jar {
    archiveFileName = 'epics2kafka.jar'
}

processIntegrationResources {
    duplicatesStrategy 'include'
}

processResources {
    filesMatching('release.properties') {
        filter {
            String line -> line.replaceAll("@VERSION@", version)
        }
    }
}

build {
    dependsOn(installDist)
}

installDist.dependsOn(generateLicenseReport)
distTar.dependsOn(generateLicenseReport)
distZip.dependsOn(generateLicenseReport)


distributions {
    main {
        contents {
            from jar
            from (project.configurations.runtimeClasspath)
            from("build/reports/dependency-license") {
                into "dependency-license"
            }
        }
    }
}