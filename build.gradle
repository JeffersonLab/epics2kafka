plugins {
    id 'java'
    id 'distribution'
    id 'maven-publish'
}

group 'org.jlab.kafka.connect'
version '0.10.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url  "https://dl.bintray.com/slominskir/maven"
    }
}

// We define two extra sets: integration tests and alarms (docker-compose alarms example dependencies)
sourceSets {
    integration {
        java.srcDir "${projectDir}/src/integration/java"
        resources.srcDir "${projectDir}/src/integration/resources"
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    alarms {
        // No source, just dependencies
    }
}

configurations {
    testImplementation.extendsFrom compileOnly
    integrationImplementation.extendsFrom implementation
    integrationRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation files('lib/jca-2.4.6.jar')
    //implementation 'org.epics:jca:2.4.6' // Only works with Java 11 runtime
    compileOnly 'com.fasterxml.jackson.core:jackson-databind:2.10.2'
    compileOnly 'org.apache.kafka:connect-api:2.4.0'
    compileOnly 'org.apache.kafka:connect-transforms:2.4.0'
    compileOnly 'org.slf4j:slf4j-log4j12:1.7.28'
    testImplementation 'junit:junit:4.13'
    alarmsImplementation 'org.jlab.kafka.connect.transform:kafka-transform-epics:0.15.0'
    integrationImplementation 'org.testcontainers:testcontainers:1.14.3'
    integrationImplementation 'org.slf4j:slf4j-log4j12:1.7.28'
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    //shouldRunAfter test

    testLogging {
        showStandardStreams = true
    }
}

//check.dependsOn integrationTest

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += "-Xlint:unchecked"
}

jar {
    archiveFileName = 'epics2kafka.jar'
}

processResources {
    filesMatching('release.properties') {
        filter {
            String line -> line.replaceAll("@VERSION@", version)
        }
    }
}

build {
    dependsOn(installDist)
}

task alarmTest(type: Copy) {
    dependsOn(build)
    into "${buildDir}/install"
    from configurations.alarmsCompileClasspath
    include '**/kafka-transform-epics-*.jar'
}

distributions {
    main {
        contents {
            from jar
            from (project.configurations.runtimeClasspath)
        }
    }
}